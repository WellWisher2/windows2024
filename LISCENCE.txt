-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#1
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
A. Write a python program to find the best of two test average marks out of three test’s marks accepted from the user.
Program:
m1 = int (input("Enter the marks in the first test: "))
m2 = int (input("Enter the marks in second test: "))
m3 = int (input("Enter the marks in third test: "))

if (m1 > m2):
    if (m2 > m3):
        total = m1 + m2
    else: 
        total = m1 + m3
elif (m1 > m3):
    total = m1 + m2
else:
    total = m2 + m3
    
Avg = total / 2
print ("The average of the best two test marks is: ",Avg)

B. Develop a Python program to check whether a given number is palindrome or not and also   count the number of occurrences of each digit in the input number.
               Program:
val = int(input("Enter a value : "))
str_val = str(val)
if str_val == str_val[::-1]:
    print("Palindrome")
else:
    print("Not Palindrome")
    
for i in range(10):
    if str_val.count(str(i)) > 0:
        print(str(i),"appears", str_val.count(str(i)), "times");

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#2
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
A. Defined as a function F as Fn = Fn-1 + Fn-2. Write a Python program which accepts a value for N (where N >0) as input and pass this value to the function. Display suitable error message if the condition for input value is not followed.
Program:
def fn(n):
    if n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fn(n-1) + fn(n-2)
    


num = int(input("Enter a number : "))


if num > 0:
    print("fn(", num, ") = ",fn(num) , sep ="")
else:
    print("Error in input")


B. Develop a python program to convert binary to decimal, octal to hexadecimal using functions.


Program:
def bin2Dec(val):
    rev=val[::-1]
    dec = 0
    i = 0
    for dig in rev:
        dec += int(dig) * 2**i
        i += 1
    
    return dec


def oct2Hex(val):
    rev=val[::-1]
    dec = 0
    i = 0
    for dig in rev:
        dec += int(dig) * 8**i
        i += 1
    list=[]
    while dec != 0:
        list.append(dec%16)
        dec = dec // 16
        
    nl=[]
    for elem in list[::-1]:
        if elem <= 9:
            nl.append(str(elem))
        else:
            nl.append(chr(ord('A') + (elem -10)))
    hex = "".join(nl)
    
    return hex


num1 = input("Enter a binary number : ")    
print(bin2Dec(num1))
num2 = input("Enter a octal number : ")
print(oct2Hex(num2))

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#3
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

A. Write a Python program that accepts a sentence and find the number of words, digits, uppercase letters and lowercase letters.
Program:
sentence = input("Enter a sentence : ")

wordList = sentence.split(" ")
print("This sentence has", len(wordList), "words")

digCnt = upCnt = loCnt = 0

for ch in sentence:
    if '0' <= ch <= '9':
        digCnt += 1
    elif 'A' <= ch <= 'Z':
        upCnt += 1
    elif 'a' <= ch <= 'z':
        loCnt += 1

print("This sentence has", digCnt, "digits", upCnt, "upper case letters", loCnt, "lower case letters")

B. Write a Python program to find the string similarity between two given strings.
Program:
str1 = input("Enter String 1 \n")
str2 = input("Enter String 2 \n")

if len(str2) < len(str1):
    short = len(str2)
    long = len(str1)
else:
    short = len(str1)
    long = len(str2)
    

matchCnt = 0
for i in range(short):
    if str1[i] == str2[i]:
        matchCnt += 1

print("Similarity between two said strings:")
print(matchCnt/long)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#4
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

A. Write a python program to implement insertion sort and merge sort using lists.
Program:
import random


def merge_sort(lst):
    if len(lst) > 1:
        mid = len(lst) // 2
        left_half = lst[:mid]
        right_half = lst[mid:]


        merge_sort(left_half)
        merge_sort(right_half)


        i = j = k = 0


        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                lst[k] = left_half[i]
                i += 1
            else:
                lst[k] = right_half[j]
                j += 1
            k += 1


        while i < len(left_half):
            lst[k] = left_half[i]
            i += 1
            k += 1


        while j < len(right_half):
            lst[k] = right_half[j]
            j += 1
            k += 1


    return lst




def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key


my_list = []


for i in range(10):
    my_list.append(random.randint(0, 999))


print("\nUnsorted List")
print(my_list)
print("Sorting using Insertion Sort")
insertion_sort(my_list)
print(my_list)




my_list = []


for i in range(10):
    my_list.append(random.randint(0, 999))


print("\nUnsorted List")
print(my_list)
print("Sorting using Merge Sort")
merge_sort(my_list)
print(my_list)


B. Write a program to convert roman numbers into integer values using dictionaries
Program:
def roman_to_integer(roman):




    numerals={'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}


    integer=0
    




    for i in range(len(roman)):
        value=numerals[roman[i]]
        if i+1 < len(roman) and numerals[roman[i+1]]>value:
            integer-=value




        else: 
            integer+=value


    return integer


romanStr = input("Enter a Roman Number : ")


print(roman_to_integer(romanStr))




Program4b:
def roman2Dec(romStr):
    roman_dict ={'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    # Analyze string backwards
    romanBack = list(romStr)[::-1]
    value = 0
    # To keep track of order
    rightVal = roman_dict[romanBack[0]]  
    for numeral in romanBack:
        leftVal = roman_dict[numeral]
        # Check for subtraction
        if leftVal < rightVal:
           value -= leftVal
        else:
            value += leftVal
        rightVal = leftVal
    return value




romanStr = input("Enter a Roman Number : ")
print(roman2Dec(romanStr))


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#5
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


A. Write a function called isphonenumber () to recognize a pattern 415-555-4242 without using regular expression and also write the code to recognize the same pattern using regular expression.
Program:
import re




def isphonenumber(numStr):
    if len(numStr) != 12:
        return False
    for i in range(len(numStr)):
        if i==3 or i==7:
            if numStr[i] != "-":
                return False
        else:
            if numStr[i].isdigit() == False:
                return False
    return True




def chkphonenumber(numStr):
    ph_no_pattern = re.compile(r'^\d{3}-\d{3}-\d{4}$')
    if ph_no_pattern.match(numStr):
        return True
    else:
        return False


ph_num = input("Enter a phone number : ")
print("Without using Regular Expression")
if isphonenumber(ph_num):
    print("Valid phone number")
else:
    print("Invalid phone number")


print("Using Regular Expression")
if chkphonenumber(ph_num):
    print("Valid phone number")
else:
    print("Invalid phone number")


B. Develop a python program that could search the text in a file for phone numbers (+919900889977) and email addresses (sample@gmail.com)
Program:
import re


# Define the regular expression for phone numbers
phone_regex = re.compile(r'\+\d{12}')
email_regex = re.compile(r'[A-Za-z0-9._]+@[A-Za-z0-9-]+\.[A-Z|a-z]{2,}')
# Open the file for reading
with open('example.txt', 'r') as f:
    # Loop through each line in the file
    for line in f:
        # Search for phone numbers in the line
        matches = phone_regex.findall(line)
        # Print any matches found
        for match in matches:
            print(match)


        matches = email_regex.findall(line)
        # Print any matches found
        for match in matches:
            print(match)     

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#6
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

A. Write a python program to accept a file name from the user and perform the following operations
Display the first N line of the file
Find the frequency of occurrence of the word accepted from the user in the file
Program:
import os.path
import sys
fname = input("Enter the filename : ")      
if not os.path.isfile(fname):
    print("File", fname, "doesn't exists")
    sys.exit(0)
infile = open(fname, "r")
lineList = infile.readlines()
for i in range(20):
    print(i+1, ":", lineList[i])
word = input("Enter a word : ")
cnt = 0
for line in lineList:
    cnt += line.count(word)
print("The word", word, "appears", cnt, "times in the file")


B. Write a program to create a ZIP file of a particular folder which contains several files in it.
Program:
import os
import sys
import pathlib
import zipfile
dirName = input("Enter Folder name that you want to backup : ")
if not os.path.isdir(dirName):
                print("Directory", dirName, "doesn't exists")
                sys.exit(0)
curDirectory = pathlib.Path(dirName)
with zipfile.ZipFile("myZip.zip", mode="w") as archive:
    for file_path in curDirectory.rglob("*"):
        archive.write(file_path,arcname=file_path.relative_to(curDirectory))
if os.path.isfile("myZip.zip"):
                print("Archive", "myZip.zip", "created successfully")
else:
    print("Error in creating zip archive")


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#7
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

A. By using the concept of inheritance write a python program to find the area of triangle, circle and rectangle.
Program:
import math


class Shape:
    def __init__(self):
        self.area = 0
        self.name = ""
        
    def showArea(self):
        print("The area of the", self.name, "is", self.area, "units")
        
class Circle(Shape):
    def __init__(self,radius):
        self.area = 0
        self.name = "Circle"
        self.radius = radius
        
    def calcArea(self):
        self.area = math.pi * self.radius * self.radius
    
class Rectangle(Shape):
    def __init__(self,length,breadth):
        self.area = 0
        self.name = "Rectangle"
        self.length = length
        self.breadth = breadth
        
    def calcArea(self):
        self.area = self.length * self.breadth


class Triangle(Shape):
    def __init__(self,base,height):
        self.area = 0
        self.name = "Triangle"
        self.base = base
        self.height = height
        
    def calcArea(self):
        self.area = self.base * self.height / 2
    


    
c1 = Circle(5)
c1.calcArea()
c1.showArea()




r1 = Rectangle(5, 4)
r1.calcArea()
r1.showArea()




t1 = Triangle(3, 4)
t1.calcArea()
t1.showArea()


B. Write a python program by creating a class called Employee to store the details of Name, Employee_ID, Department and Salary, and implement a method to update salary of employees belonging to a given department.
Program:
class Employee:
    def __init__(self):
        self.name = ""
        self.empId = ""
        self.dept = ""
        self.salary = 0
        
    def getEmpDetails(self):
        self.name = input("Enter Employee name : ")
        self.empId = input("Enter Employee ID : ")
        self.dept = input("Enter Employee Dept : ")
        self.salary = int(input("Enter Employee Salary : "))
        
    def showEmpDetails(self):
        print("Employee Details")
        print("Name : ", self.name)
        print("ID : ", self.empId)
        print("Dept : ", self.dept)
        print("Salary : ", self.salary)
        
    def updtSalary(self):
        self.salary = int(input("Enter new Salary : "))
        print("Updated Salary", self.salary)
        


e1 = Employee()
e1.getEmpDetails()
e1.showEmpDetails()
e1.updtSalary()

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#8
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Write a python program to find the whether the given input is palindrome or not (for both string and integer) using the concept of polymorphism and inheritance.
Program:
1.
#using Polymorphism
class A:
    def __init__(self,s):


        self.s=s
    def palindrome(self):
        rev=self.s[::-1]
        if rev==self.s:
            print("The string is palindrome")
        else:
            print("Not a palindrome")
#single inheritance
class B(A):
    '''def __init__(self,s)
            self.s=s'''
    def palindrome(self):    #method overriding
        temp=self.s
        rev=0
        count=0
        while(self.s!=0):
            dig=self.s%10
            rev=rev*10+dig
            self.s=self.s//10
        if temp==rev:
            print("The Number is palindrome")
        else:
            print("Not a palindrome")
a=A(input("enter a string"))
b=B(int(input("Enter an integer")))
a.palindrome()
b.palindrome()

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#9
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

A. Write a python program to download the all XKCD comics
Program:

import requests
import os
from bs4 import BeautifulSoup

# Set the URL of the first XKCD comic
url = 'https://xkcd.com/1/'

# Create a folder to store the comics
if not os.path.exists('xkcd_comics'):
    os.makedirs('xkcd_comics')


# Loop through all the comics
while True:
    # Download the page content
    res = requests.get(url)
    res.raise_for_status()

    # Parse the page content using BeautifulSoup
    soup = BeautifulSoup(res.text, 'html.parser')

    # Find the URL of the comic image
    comic_elem = soup.select('#comic img')
    if comic_elem == []:
        print('Could not find comic image.')
    else:
        comic_url = 'https:' + comic_elem[0].get('src')






# Download the comic image
print(f'Downloading {comic_url}...')
res = requests.get(comic_url)
res.raise_for_status()

# Save the comic image to the xkcd_comics folder
image_file = open(os.path.join('xkcd_comics', os.path.basename(comic_url)), 'wb')
for chunk in res.iter_content(100000):
    image_file.write(chunk)
image_file.close()
# Get the URL of the previous comic

    prev_link = soup.select('a[rel="prev"]')[0]
    if not prev_link:
        break
    url = 'https://xkcd.com' + prev_link.get('href')
print('All comics downloaded.')


B.  Demonstrate python program to read the data from the spreadsheet and write the data in to the spreadsheet
Program:
from openpyxl import Workbook, load_workbook
import time
#creating excell workbook
book=Workbook()
sheet=book.active


sheet['A1']=56
sheet['A2']=43


now=time.strftime(" %x ")
sheet['A3']=now
book.save("sample2.xlsx")
wb=load_workbook("sample2.xlsx")
sheet=wb.worksheets[0]


#inserting another worksheet
sheet2=wb.create_sheet('demo')
name=["abc","zxc","qwe","asd","dfg"]
salary=["12345","23456","34567","45678","56789]
sheet2.cell(row=1,column=1).value="name“
sheet2.cell(row=1,column=2).value="salary"


#1st way of writing to cell
j=2
for i in range(0,5):
    sheet2.cell(row=j, column=1).value =name[i]
    sheet2.cell(row=j, column=2).value = salary[i]
    j+=1
#2nd way of writing to cell
print(wb.active)
sheet.cell(row=6,column=9).value="Raju“
sheet['F10']=100
print(wb.active)
print(wb.sheetnames)
wb.save("sample2.xlsx")


#reading from worksheet 1st way
print("Reading Row1",sheet['A1'].value)
print("Reading Row3",sheet['A3'].value)
#reading from worksheet 2nd way
cells=sheet['A1':'B3']
for c1, c2 in cells:
    print(c1.value, c2.value)


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#10
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

A.
from PyPDF2 import PdfWriter, PdfReader 
num = int(input("Enter page number you want combine from multiple documents ")) 
pdf1 = open('program.pdf', 'rb') 
pdf2 = open('aimlsyll.pdf', 'rb')
pdf_writer = PdfWriter()
 pdf1_reader = PdfReader(pdf1) 
page = pdf1_reader.pages[num - 1] 
pdf_writer.add_page(page)
pdf2_reader = PdfReader(pdf2) 
page = pdf2_reader.pages[num - 1]
 pdf_writer.add_page(page)
with open('output.pdf', 'wb') as output: 
pdf_writer.write(output)


  10.b 
Program:
import json

 with open('weather_data.json') as f: 
data = json.load(f) 

current_temp = data['main']['temp'] 
humidity = data['main']['humidity'] 
weather_desc = data['weather'][0]['description']

print(f"Current temperature: {current_temp}°C") 
print(f"Humidity: {humidity}%") 
print(f"Weather description: {weather_desc}")

import requests, json
api_key = “86652d0df8f0264b715007eb2255197c”
base_url = “http://api.openweathermap.org/data/2.5/weather?”
city_name = input(“Enter city name :”)
complete_url = base_url + “appid=” + api_key + “q=&q+ city_name
response = requests.get(complete_url)
x = response.json()

